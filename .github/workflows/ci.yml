name: CI/CD Pipeline

on:
  push:
    branches: [production]  # Disabled - only runs on production branch
  pull_request:
    branches: [production]

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci
      
      - name: Generate Prisma Client
        working-directory: backend
        run: npx prisma generate
      
      - name: Run linter
        working-directory: backend
        run: npm run lint || true
      
      - name: Run tests
        working-directory: backend
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: mongodb://test:test@localhost:27017/chainmind_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci-testing-only-32chars
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      
      - name: Build
        working-directory: backend
        run: npm run build

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run linter
        working-directory: frontend
        run: npm run lint || true
      
      - name: Type check
        working-directory: frontend
        run: npm run type-check || npx tsc --noEmit || true
      
      - name: Run tests
        working-directory: frontend
        run: npm test || true
      
      - name: Build
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3001

  # Smart Contract Tests
  contracts-test:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json
      
      - name: Install dependencies
        working-directory: contracts
        run: npm ci
      
      - name: Compile contracts
        working-directory: contracts
        run: npx hardhat compile
      
      - name: Run tests
        working-directory: contracts
        run: npm test
      
      - name: Generate coverage report
        working-directory: contracts
        run: npm run coverage || true

  # Code Quality Check
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Docker Images (only on main branch)
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [backend-test, frontend-test, contracts-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/chainmind-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/chainmind-backend:${{ github.sha }}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/chainmind-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/chainmind-frontend:${{ github.sha }}
